[{"name":"app.R","content":"# ========================================================================\r\n# APLICAÇÃO SHINY PARA PROCESSAMENTO DE PDF DE PESQUISA DE PREÇO\r\n# VERSÃO FINAL UNIFICADA v5 (INTERFACE SIMPLIFICADA)\r\n# ========================================================================\r\n\r\n# --- 1. Carregar Todas as Bibliotecas Necessárias ---\r\nlibrary(shiny)\r\nlibrary(stringr)\r\nlibrary(dplyr)\r\nlibrary(tidyr)\r\nlibrary(openxlsx)\r\nlibrary(bslib)\r\nlibrary(base64enc)\r\nlibrary(shinyjs)\r\n\r\n# --- AUMENTAR LIMITE DE UPLOAD PARA 100MB ---\r\noptions(shiny.maxRequestSize = 100 * 1024^2)\r\n\r\n# =============================================================================\r\n# FUNÇÕES GLOBAIS E DE UTILIDADE\r\n# =============================================================================\r\nparse_br_number <- function(s_vector) {\r\n  if (is.null(s_vector)) return(NA_real_)\r\n  s_vector[is.na(s_vector)] <- \"\"\r\n  \r\n  s_cleaned <- str_remove_all(s_vector, \"[R$\\\\s]\")\r\n  has_comma <- str_detect(s_cleaned, \",\")\r\n  \r\n  s_cleaned[has_comma] <- str_replace(\r\n    str_remove_all(s_cleaned[has_comma], \"\\\\.\"),\r\n    \",\", \".\"\r\n  )\r\n  \r\n  no_comma <- !has_comma\r\n  if(any(no_comma)) {\r\n    num_dots <- str_count(s_cleaned[no_comma], \"\\\\.\")\r\n    needs_dot_removal <- num_dots > 1\r\n    if(any(needs_dot_removal)) {\r\n      s_cleaned[no_comma][needs_dot_removal] <- str_remove_all(s_cleaned[no_comma][needs_dot_removal], \"\\\\.\")\r\n    }\r\n  }\r\n  \r\n  return(suppressWarnings(as.numeric(s_cleaned)))\r\n}\r\n\r\nget_pdf_text_pages <- function(local_path, webr_pages) {\r\n  if (!is.null(webr_pages) && length(webr_pages) > 0) {\r\n    return(webr_pages)\r\n  }\r\n  if (requireNamespace(\"pdftools\", quietly = TRUE)) {\r\n    return(pdftools::pdf_text(local_path))\r\n  }\r\n  stop(\"Nenhum mecanismo de leitura de PDF disponível.\")\r\n}\r\n\r\n\r\n# ===================================================================================\r\n# LÓGICA DE EXTRAÇÃO DE DADOS (VERSÃO ESTÁVEL)\r\n# ===================================================================================\r\nextract_format_AB <- function(all_lines, state_vars) {\r\n  all_quotes_list <- list()\r\n  main_line_regex <- \"(R\\\\$\\\\s*[\\\\d.,]+)\\\\s+([0-9]{2}/[0-9]{2}/[0-9]{4})\\\\s+(Sim|Não)\\\\s*$\"\r\n  processed_line_regex <- \"^(\\\\S+)\\\\s+([IVXLCDM]+)\\\\s+(?:(.*?)\\\\s+)?([\\\\d.,]+)\\\\s*(.*)$\"\r\n  \r\n  quote_indices <- which(str_detect(all_lines, main_line_regex))\r\n  \r\n  for (i in quote_indices) {\r\n    line <- all_lines[i]\r\n    main_match <- str_match(line, main_line_regex)\r\n    preco_unitario_str <- main_match[1, 2]\r\n    data_cotacao <- main_match[1, 3]\r\n    compone <- main_match[1, 4]\r\n    processed_line <- str_remove(line, main_line_regex) %>% str_squish()\r\n    match_data <- str_match(processed_line, processed_line_regex)\r\n    \r\n    if (is.na(match_data[1, 1])) {\r\n      next \r\n    }\r\n    \r\n    n_cotacao <- match_data[1, 2]\r\n    inciso_val <- match_data[1, 3]\r\n    nome_na_linha <- str_trim(match_data[1, 4])\r\n    quantidade <- match_data[1, 5]\r\n    unidade <- str_trim(match_data[1, 6])\r\n    \r\n    if (is.na(nome_na_linha)) nome_na_linha <- \"\"\r\n    if (is.na(unidade)) unidade <- \"\"\r\n    if (!is.na(quantidade) && str_detect(quantidade, \"\\\\.\")) {\r\n      unidade <- str_squish(paste(quantidade, unidade))\r\n      quantidade <- \"\"\r\n    }\r\n    \r\n    if (!is.na(unidade)) {\r\n      unidade <- str_remove(unidade, \"\\\\s*\\\\d{2,}\\\\.\\\\d{3,}.*\")\r\n      unidade <- str_remove(unidade, \"\\\\s*/\\\\d{4,}.*\")\r\n      unidade <- str_squish(unidade)\r\n    }\r\n    \r\n    nome_partes_superiores <- c()\r\n    for (j in (i - 1):max(1, i - 5)) {\r\n      prev_line <- all_lines[j]\r\n      if (str_detect(prev_line, \"Nº\\\\s+Inciso\\\\s+Nome\") || str_detect(prev_line, main_line_regex) || str_detect(prev_line, \"Id da Compra|Data da Cotação\")) {\r\n        break\r\n      }\r\n      nome_partes_superiores <- c(str_squish(prev_line), nome_partes_superiores)\r\n    }\r\n    nome_partes_inferiores <- c()\r\n    for (k in (i + 1):min(length(all_lines), i + 5)) {\r\n      next_line <- all_lines[k]\r\n      if (str_detect(next_line, \"Id da Compra|Data da Cotação|Fornecedor:|Esfera|Critério Julgamento Item\") || str_detect(next_line, \"^\\\\s*Nº\\\\s+Inciso\") || str_detect(next_line, main_line_regex) || str_detect(next_line, \"^Item:\\\\s*\\\\d+\")) {\r\n        break\r\n      }\r\n      nome_partes_inferiores <- c(nome_partes_inferiores, str_squish(next_line))\r\n    }\r\n    nome_completo <- str_squish(paste(paste(nome_partes_superiores, collapse = \" \"), nome_na_linha, paste(nome_partes_inferiores, collapse = \" \"), collapse = \" \"))\r\n    if (nchar(nome_completo) > 0 && !str_detect(nome_completo, \"Compras\\\\.gov\\\\.br\")) {\r\n      nome_completo <- paste(nome_completo, \"- Compras.gov.br\")\r\n    }\r\n    nome_completo <- str_remove(nome_completo, \"^-\") %>% str_squish()\r\n    preco_numerico <- parse_br_number(preco_unitario_str)\r\n    preco_formatado <- if (!is.na(preco_numerico)) {\r\n      str_replace(sprintf(\"%.4f\", preco_numerico), \"\\\\.\", \",\")\r\n    } else {\r\n      preco_unitario_str\r\n    }\r\n    endereco_eletronico <- NA_character_\r\n    anexo <- NA_character_\r\n    cotacao_uasg <- NA_character_\r\n    next_quote_line_idx <- length(all_lines) + 1\r\n    if (i < length(all_lines)) {\r\n      following_quotes <- which(str_detect(all_lines[(i + 1):length(all_lines)], main_line_regex))\r\n      if (length(following_quotes) > 0) {\r\n        next_quote_line_idx <- i + following_quotes[1]\r\n      }\r\n    }\r\n    search_lines_uasg <- all_lines[i:(next_quote_line_idx - 1)]\r\n    uasg_header_line_idx <- which(str_detect(search_lines_uasg, \"Esfera\") & str_detect(search_lines_uasg, \"UASG\"))\r\n    if (length(uasg_header_line_idx) > 0) {\r\n      idx_in_window <- uasg_header_line_idx[1]\r\n      if (idx_in_window + 1 <= length(search_lines_uasg)) {\r\n        next_line <- search_lines_uasg[idx_in_window + 1]\r\n        uasg_match <- str_match(next_line, \"(\\\\d{5,6})\")\r\n        if (!is.na(uasg_match[1, 2])) {\r\n          cotacao_uasg <- uasg_match[1, 2]\r\n        }\r\n      }\r\n    }\r\n    if (is.na(cotacao_uasg)) {\r\n      search_block_text <- paste(search_lines_uasg, collapse = \" \")\r\n      uasg_fallback_match <- str_match(search_block_text, \"UASG\\\\s*:?\\\\s*(\\\\d{5,6})\")\r\n      if (!is.na(uasg_fallback_match[1, 2])) {\r\n        cotacao_uasg <- uasg_fallback_match[1, 2]\r\n      }\r\n    }\r\n    search_window_start <- i + 1\r\n    search_window_end <- min(i + 30, length(all_lines))\r\n    if (search_window_start <= search_window_end) {\r\n      search_lines <- all_lines[search_window_start:search_window_end]\r\n      search_block_original_layout <- paste(search_lines, collapse = \" \\n \")\r\n      anexo_match <- str_match(search_block_original_layout, \"([\\\\w\\\\s.-]+\\\\.(?i)(pdf|png|jpeg|jpg))\")\r\n      if (!is.na(anexo_match[1, 1])) {\r\n        anexo <- str_squish(anexo_match[1, 1])\r\n      }\r\n      if (str_detect(search_block_original_layout, \"https?://\")) {\r\n        url_block <- search_block_original_layout\r\n        if (!is.na(anexo)) {\r\n          url_block <- str_remove(url_block, fixed(anexo))\r\n        }\r\n        url_block <- str_split(url_block, \"Nº\\\\s+Inciso\\\\s+Nome|Legenda:|Cotação de preços para o item\")[[1]][1]\r\n        url_block <- str_remove_all(url_block, \"\\\\d{2}:\\\\d{2}\")\r\n        url_block <- str_remove_all(url_block, \"Endereço Eletrônico|Anexos|Hora da Cotação|Data da Cotação|Marca/Modelo|Informações Adicionais\")\r\n        url_match <- str_match(url_block, \"(https?://[\\\\s\\\\S]*)\")\r\n        if (!is.na(url_match[1, 2])) {\r\n          potential_url <- url_match[1, 2]\r\n          endereco_eletronico <- str_replace_all(potential_url, \"\\\\s+\", \"\") %>% str_extract(\"https?://[^\\\\s]+\")\r\n        }\r\n      }\r\n    }\r\n    all_quotes_list[[length(all_quotes_list) + 1]] <- tibble::tibble(`Número da Pesquisa` = state_vars$numero_pesquisa, UASG = cotacao_uasg, `Título da Pesquisa` = state_vars$titulo, Item = state_vars$item_num, CATMAT = state_vars$catmat, `Descrição do Item` = state_vars$item_desc, `Nº Cotação` = n_cotacao, Inciso = inciso_val, Nome = nome_completo, Quantidade = quantidade, Unidade = unidade, `Preço unitário` = preco_formatado, Data = data_cotacao, Compõe = compone, `Endereço Eletrônico` = endereco_eletronico, Anexo = anexo)\r\n  }\r\n  return(all_quotes_list)\r\n}\r\n\r\nextract_format_C <- function(all_lines, state_vars) {\r\n  all_quotes_list <- list()\r\n  for (i in seq_along(all_lines)) {\r\n    line <- all_lines[i]\r\n    if (str_detect(line, \"Cotação de preços para o item\")) {\r\n      fornecedor <- str_match(line, \"Fornecedor: (.*?) - CNPJ:\")[, 2]\r\n      linha_inciso <- \"\"\r\n      linha_financeira <- \"\"\r\n      for (j in (i + 1):min(i + 10, length(all_lines))) {\r\n        if (str_detect(all_lines[j], \"^\\\\s*\\\\d+\\\\s+[IVXLCDM]+\"))\r\n          linha_inciso <- all_lines[j]\r\n        if (str_detect(all_lines[j], \"R\\\\$\")) {\r\n          linha_financeira <- all_lines[j]\r\n          break\r\n        }\r\n      }\r\n      if (nchar(linha_inciso) > 0 && nchar(linha_financeira) > 0) {\r\n        n_cotacao <- str_match(linha_inciso, \"^\\\\s*(\\\\d+)\")[, 2]\r\n        inciso <- str_match(linha_inciso, \"^\\\\s*\\\\d+\\\\s+([IVXLCDM]+)\")[, 2]\r\n        tokens_financeiro <- str_squish(linha_financeira) %>% str_split(\"\\\\s+\") %>% .[[1]]\r\n        quantidade <- tokens_financeiro[1]\r\n        preco_unitario_str <- str_remove(tokens_financeiro[2], \"R\\\\$\")\r\n        data_cotacao <- tokens_financeiro[3]\r\n        compone <- tokens_financeiro[4]\r\n        preco_numerico <- parse_br_number(preco_unitario_str)\r\n        preco_formatado <- if (!is.na(preco_numerico)) {\r\n          str_replace(sprintf(\"%.4f\", preco_numerico), \"\\\\.\", \",\")\r\n        } else {\r\n          preco_unitario_str\r\n        }\r\n        all_quotes_list[[length(all_quotes_list) + 1]] <- tibble::tibble(`Número da Pesquisa` = state_vars$numero_pesquisa, UASG = NA_character_, `Título da Pesquisa` = state_vars$titulo, Item = state_vars$item_num, CATMAT = state_vars$catmat, `Descrição do Item` = state_vars$item_desc, `Nº Cotação` = n_cotacao, Inciso = inciso, Nome = fornecedor, Quantidade = quantidade, Unidade = \"\", `Preço unitário` = preco_formatado, Data = data_cotacao, Compõe = compone, `Endereço Eletrônico` = NA_character_, Anexo = NA_character_)\r\n      }\r\n    }\r\n  }\r\n  return(all_quotes_list)\r\n}\r\n\r\nprocess_pdf_data <- function(text_from_pages) {\r\n  full_text <- paste(text_from_pages, collapse = \"\\n\")\r\n  all_lines <- unlist(str_split(full_text, \"\\n\"))\r\n  final_quotes <- list()\r\n  final_medians <- list()\r\n  state_vars <- list(numero_pesquisa = NA, uasg = NA, titulo = NA, item_num = NA, catmat = NA, item_desc = NA)\r\n  pesquisa_starts <- which(str_detect(all_lines, \"Relatório de pesquisa de preço\"))\r\n  pesquisa_starts <- c(pesquisa_starts, length(all_lines) + 1)\r\n  for (p in 1:(length(pesquisa_starts) - 1)) {\r\n    start_line <- pesquisa_starts[p]\r\n    end_line <- pesquisa_starts[p + 1] - 1\r\n    pesquisa_lines <- all_lines[start_line:end_line]\r\n    header_idx <- which(str_detect(pesquisa_lines, \"Número da Pesquisa\\\\s+UASG\"))\r\n    if (length(header_idx) > 0) {\r\n      data_line <- pesquisa_lines[header_idx[1] + 1]\r\n      parts <- str_squish(data_line) %>% str_split(\"\\\\s+\") %>% .[[1]]\r\n      if (length(parts) >= 2) {\r\n        state_vars$numero_pesquisa <- parts[1]\r\n        state_vars$uasg <- parts[2]\r\n      }\r\n    }\r\n    titulo_idx <- which(str_detect(pesquisa_lines, \"^\\\\s*Título:\"))\r\n    if (length(titulo_idx) > 0) {\r\n      state_vars$titulo <- str_remove(pesquisa_lines[titulo_idx[1]], \"Título:\") %>% str_squish()\r\n    }\r\n    item_starts <- which(str_detect(pesquisa_lines, \"^\\\\s*Item:\\\\s*\\\\d+\"))\r\n    item_starts <- c(item_starts, length(pesquisa_lines) + 1)\r\n    for (k in 1:(length(item_starts) - 1)) {\r\n      item_start_line <- item_starts[k]\r\n      item_end_line <- item_starts[k + 1] - 1\r\n      item_lines <- pesquisa_lines[item_start_line:item_end_line]\r\n      state_vars$item_num <- str_extract(item_lines[1], \"\\\\d+\")\r\n      desc_start_idx <- which(str_detect(item_lines, \"Descrição do item\"))\r\n      desc_end_idx <- which(str_detect(item_lines, \"Consolidação dos preços cotados\"))\r\n      if (length(desc_start_idx) > 0 && length(desc_end_idx) > 0) {\r\n        full_desc <- paste(item_lines[(desc_start_idx[1] + 1):(desc_end_idx[1] - 1)], collapse = \" \") %>% str_squish()\r\n        desc_matches <- str_match(full_desc, \"^(\\\\d+)\\\\s*-\\\\s*(.*)\")\r\n        if (!is.na(desc_matches[1, 1])) {\r\n          state_vars$catmat <- desc_matches[1, 2]\r\n          state_vars$item_desc <- desc_matches[1, 3]\r\n        } else {\r\n          state_vars$catmat <- \"N/A\"\r\n          state_vars$item_desc <- full_desc\r\n        }\r\n      }\r\n      item_text <- paste(item_lines, collapse = \"\\n\")\r\n      if (str_detect(item_text, \"Cotação de preços para o item\")) {\r\n        final_quotes <- c(final_quotes, extract_format_C(item_lines, state_vars))\r\n      } else {\r\n        final_quotes <- c(final_quotes, extract_format_AB(item_lines, state_vars))\r\n      }\r\n      median_value <- NA_real_\r\n      header_line_idx <- which(str_detect(item_lines, \"Menor Preço.*Média.*Mediana\"))\r\n      if (length(header_line_idx) > 0) {\r\n        search_window <- item_lines[(header_line_idx[1] + 1):min(header_line_idx[1] + 5, length(item_lines))]\r\n        for (line in search_window) {\r\n          if (str_count(line, \"R\\\\$\") >= 3) {\r\n            price_values <- str_extract_all(line, \"R\\\\$\\\\s*[\\\\d.,]+\")[[1]]\r\n            if (length(price_values) >= 3) {\r\n              median_value <- parse_br_number(price_values[3])\r\n              break\r\n            }\r\n          }\r\n        }\r\n      }\r\n      final_medians[[length(final_medians) + 1]] <- tibble::tibble(`Número da Pesquisa` = state_vars$numero_pesquisa, Item = as.integer(state_vars$item_num), `MEDIANA (PAINEL DE PREÇOS)` = median_value)\r\n    }\r\n  }\r\n  quotes_df <- if (length(final_quotes) > 0)\r\n    dplyr::distinct(dplyr::bind_rows(final_quotes))\r\n  else\r\n    data.frame()\r\n  medians_df <- if (length(final_medians) > 0)\r\n    dplyr::bind_rows(final_medians)\r\n  else\r\n    data.frame()\r\n  if (nrow(quotes_df) == 0) {\r\n    stop(\"Nenhum dado de cotação válido foi extraído. Verifique se o PDF está no formato correto do compras.gov.br.\")\r\n  }\r\n  return(list(quotes = quotes_df, medians = medians_df))\r\n}\r\n\r\n\r\n# ===================================================================================\r\n# INTERFACE DO USUÁRIO (UI) - SIMPLIFICADA\r\n# ===================================================================================\r\nui <- fluidPage(\r\n  useShinyjs(),\r\n  theme = bslib::bs_theme(\r\n    version = 5, preset = \"shiny\", bg = \"#F0F3F4\", fg = \"#1C2833\", primary = \"#1E8449\",\r\n    secondary = \"#145A32\", base_font = bslib::font_google(\"Montserrat\", local = FALSE),\r\n    heading_font = bslib::font_google(\"Roboto Slab\", local = FALSE),\r\n    \"card-header-bg\" = \"#1E8449\", \"card-header-color\" = \"#FFFFFF\"\r\n  ),\r\n  tags$head(\r\n    tags$style(HTML(\"\r\n      #status_text {\r\n        color: white;\r\n        background-color: transparent;\r\n        border: none;\r\n        white-space: pre-wrap;\r\n        word-break: break-all;\r\n        font-size: 1em; \r\n      }\r\n      .faded-text { color: #AAB7B8; }\r\n      .shiny-input-container .progress { height: 35px !important; }\r\n      .shiny-input-container .progress-bar { font-size: 18px !important; line-height: 35px !important; }\r\n    \")),\r\n    tags$script(src = \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"),\r\n    tags$script(HTML(\"\r\n      window.pdfjsLib = window['pdfjs-dist/build/pdf'];\r\n      if (pdfjsLib) pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\r\n    \")),\r\n    tags$script(HTML(\"(function(){async function readPdfFile(file){if(!file||!window.pdfjsLib)return;if(window.Shiny&&Shiny.setInputValue){Shiny.setInputValue('pdf_text_pages',null);}try{const buf=await file.arrayBuffer();const loadingTask=window.pdfjsLib.getDocument({data:new Uint8Array(buf)});const pdf=await loadingTask.promise;const pages=[];for(let p=1;p<=pdf.numPages;p++){const page=await pdf.getPage(p);const textContent=await page.getTextContent();const yTol=2;let lastY=-1;let lineBuffer=[];const pageLines=[];textContent.items.sort((a,b)=>{if(Math.abs(a.transform[5]-b.transform[5])>yTol){return b.transform[5]-a.transform[5];}return a.transform[4]-b.transform[4];});for(const item of textContent.items){if(lastY!==-1&&Math.abs(item.transform[5]-lastY)>yTol){pageLines.push(lineBuffer.join(' '));lineBuffer=[];}lineBuffer.push(item.str);lastY=item.transform[5];}if(lineBuffer.length>0){pageLines.push(lineBuffer.join(' '));}pages.push(pageLines.join('\\\\n'));}if(window.Shiny&&Shiny.setInputValue){Shiny.setInputValue('pdf_text_pages',pages,{priority:'event'});}}catch(err){console.error('Falha ao ler PDF via pdf.js:',err);if(window.Shiny&&Shiny.setInputValue){Shiny.setInputValue('pdf_text_pages_error',String(err),{priority:'event'});}}}document.addEventListener('change',e=>{const tgt=e.target;if(tgt&&tgt.id==='pdf_file'&&tgt.files&&tgt.files[0]){readPdfFile(tgt.files[0]);}},true);})();\")),\r\n    tags$script(HTML(\"function downloadData(data,filename,mime){const base64_string=data;const byteCharacters=atob(base64_string);const byteNumbers=new Array(byteCharacters.length);for(let i=0;i<byteCharacters.length;i++){byteNumbers[i]=byteCharacters.charCodeAt(i);}const byteArray=new Uint8Array(byteNumbers);const blob=new Blob([byteArray],{type:mime});const link=document.createElement('a');link.href=window.URL.createObjectURL(blob);link.download=filename;document.body.appendChild(link);link.click();document.body.removeChild(link);}Shiny.addCustomMessageHandler('download_b64',function(message){downloadData(message.data,message.filename,message.mime);});\"))\r\n  ),\r\n  div(\r\n    class = \"text-center p-4 mb-4\", style = \"background-color: #145A32; color: white;\",\r\n    h1(icon(\"file-invoice-dollar\"), \"Análise Automatizada de Pesquisa de Preços\"),\r\n    p(\"Faça aqui o upload do relatório PDF de pesquisa de preço do compras.gov.br para análise das cotações.\", br(),\r\n      tags$small(\"Esta ferramenta está em conformidade com as diretrizes da Instrução Normativa SEGES/ME nº 65/2021\", class = \"faded-text\")\r\n    )\r\n  ),\r\n  bslib::layout_sidebar(\r\n    sidebar = bslib::sidebar(\r\n      width = \"350px\",\r\n      bslib::card(\r\n        bslib::card_header(class = \"d-flex justify-content-between align-items-center\", \"Painel de Controle\", tags$span(icon(\"sliders-h\"), class = \"h5 mb-0\")),\r\n        bslib::card_body(\r\n          fileInput(\"pdf_file\", \"Selecione o relatório PDF para iniciar:\", accept = c(\".pdf\"), width = \"100%\"),\r\n          uiOutput(\"process_button_ui\")\r\n        ),\r\n        bslib::card_footer(\r\n          div(class = \"text-center small\", p(strong(\"Desenvolvimento:\")),\r\n              p(\"Marcos Castaneda\", br(), tags$small(\"Economista - Universidade Federal de Sergipe\")),\r\n              p(\"Roney Melo\", br(), tags$small(\"Atuário - Universidade Federal de Sergipe\"))\r\n          )\r\n        )\r\n      )\r\n    ),\r\n    \r\n    # --- UI SIMPLIFICADA: SEM ABAS ---\r\n    bslib::layout_columns(\r\n      col_widths = c(6, 6),\r\n      bslib::card(\r\n        bslib::card_header(icon(\"book-open\"), \"Como Usar\"),\r\n        bslib::card_body(\r\n          style = \"text-align: justify;\",\r\n          p(\"Siga estes 3 passos simples para obter sua análise:\"),\r\n          tags$ol(\r\n            tags$li(strong(\"Carregue o arquivo:\"), \" Clique no botão 'Browse...' ou 'Navegar...' e escolha o PDF da pesquisa de preços (exclusivamente para arquivos PDF gerados no compras.gov.br).\"),\r\n            tags$li(strong(\"Inicie o processo:\"), \" Após o nome do arquivo aparecer, um botão verde surgirá. Clique em 'Processar e Baixar Planilha Excel'.\"),\r\n            tags$li(strong(\"Receba o resultado:\"), \" Aguarde a conclusão. O download da planilha Excel começará automaticamente.\")\r\n          )\r\n        )\r\n      ),\r\n      bslib::card(\r\n        height = \"100%\", bslib::card_header(icon(\"terminal\"), \"Status do Processamento\"),\r\n        bslib::card_body(\r\n          style = \"background-color: #2E4053; color: #EAECEE; font-family: monospace; font-size: 0.9em; overflow-y: auto;\",\r\n          verbatimTextOutput(\"status_text\")\r\n        )\r\n      )\r\n    ),\r\n    \r\n    br(), # Adiciona um espaço\r\n    \r\n    bslib::layout_columns(\r\n      col_widths = 12,\r\n      bslib::card(\r\n        class = \"border-warning\",\r\n        bslib::card_body(\r\n          div(class = \"d-flex align-items-center\", div(icon(\"exclamation-triangle\", class = \"fa-2x text-warning me-3\")),\r\n              div(strong(\"Aviso Importante:\"), p(\"Esta ferramenta é um poderoso auxílio para a conferência da pesquisa de preços de referência feitas no compras.gov.br, mas não elimina a necessidade de avaliação crítica do responsável.\", class = \"mb-0 small\"))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )\r\n)\r\n\r\n\r\n# ===================================================================================\r\n# SERVIDOR (SERVER) - SIMPLIFICADO\r\n# ===================================================================================\r\nserver <- function(input, output, session) {\r\n  \r\n  log_text <- reactiveVal(\"Aguardando o upload do arquivo PDF...\")\r\n  \r\n  observeEvent(input$pdf_file, {\r\n    req(input$pdf_file)\r\n    log_text(paste0(\"Arquivo '\", input$pdf_file$name, \"' carregado.\\nIniciando leitura do conteúdo no navegador... Aguarde.\"))\r\n  })\r\n  \r\n  observeEvent(input$pdf_text_pages, {\r\n    req(input$pdf_file$name)\r\n    log_text(paste0(\"Arquivo '\", input$pdf_file$name, \"' lido com sucesso.\\nPronto para processar.\"))\r\n  })\r\n  \r\n  observeEvent(input$pdf_text_pages_error, ignoreInit = TRUE, {\r\n    log_text(paste(log_text(), \"\\n[AVISO] Falha do leitor PDF no navegador:\", input$pdf_text_pages_error))\r\n  })\r\n  \r\n  output$status_text <- renderText({ log_text() })\r\n  \r\n  output$process_button_ui <- renderUI({\r\n    req(input$pdf_file)\r\n    \r\n    if (is.null(input$pdf_text_pages)) {\r\n      actionButton(\"loading_button\", \r\n                   \"Lendo o PDF no navegador...\", \r\n                   icon = icon(\"spinner\", class = \"fa-spin\"), \r\n                   class = \"btn-secondary btn-lg w-100\", \r\n                   disabled = TRUE)\r\n    } else {\r\n      actionButton(\"process_button\", \r\n                   \"Processar e Baixar Planilha Excel\", \r\n                   icon = icon(\"cogs\"), \r\n                   class = \"btn-primary btn-lg w-100\")\r\n    }\r\n  })\r\n  \r\n  observeEvent(input$process_button, {\r\n    req(input$pdf_file, input$pdf_text_pages)\r\n    \r\n    shinyjs::disable(\"process_button\")\r\n    updateActionButton(session, \"process_button\", label = \"Em execução:\", icon = icon(\"spinner\", class = \"fa-spin\"))\r\n    \r\n    log_text(\"Iniciando o processo...\\nIsso pode levar alguns segundos.\\n\\n--- LOG DE PROCESSAMENTO ---\")\r\n    \r\n    withProgress(message = 'Em execução:', value = 0, {\r\n      \r\n      tmp_xlsx_path <- NULL\r\n      \r\n      tryCatch({\r\n        setProgress(0.1, detail = paste0(\"Lendo e processando o PDF... (10%)\"))\r\n        log_text(paste(log_text(), \"\\n[1/4] Extraindo dados do PDF...\"))\r\n        \r\n        text_pages <- get_pdf_text_pages(input$pdf_file$datapath, input$pdf_text_pages)\r\n        processed_data <- process_pdf_data(text_pages)\r\n        \r\n        dados_extracao_pdf <- processed_data$quotes\r\n        all_pdf_medians <- processed_data$medians\r\n        \r\n        setProgress(0.35, detail = paste0(\"Realizando cálculos... (35%)\"))\r\n        log_text(paste(log_text(), \"\\n[2/4] Realizando cálculos e transformações...\"))\r\n        \r\n        extracao_df <- dados_extracao_pdf\r\n        extracao_df$`Preço unitário` <- parse_br_number(extracao_df$`Preço unitário`)\r\n        \r\n        extracao_df <- extracao_df %>% mutate(Item = as.integer(Item))\r\n        \r\n        incisos_summary <- extracao_df %>%\r\n          filter(Compõe == \"Sim\" & !is.na(`Preço unitário`) & !is.na(Inciso)) %>%\r\n          group_by(`Número da Pesquisa`, Item) %>%\r\n          summarise(\r\n            INCISOS_CONCAT = paste(sort(unique(Inciso)), collapse = \",\"),\r\n            .groups = \"drop\"\r\n          )\r\n        \r\n        base_data <- extracao_df %>%\r\n          filter(Compõe == \"Sim\" & !is.na(`Preço unitário`)) %>%\r\n          group_by(`Número da Pesquisa`, Item) %>%\r\n          arrange(`Nº Cotação`) %>%\r\n          mutate(price_num = paste0(\"PREÇO \", row_number())) %>%\r\n          summarise(\r\n            CATMAT = first(CATMAT), `Descrição do Item` = first(`Descrição do Item`),\r\n            prices_data = list(tibble::tibble(price_num, `Preço unitário`)), .groups = 'drop'\r\n          ) %>%\r\n          tidyr::unnest(prices_data) %>%\r\n          tidyr::pivot_wider(names_from = price_num, values_from = `Preço unitário`) %>%\r\n          ungroup()\r\n        \r\n        base_data$Item <- as.integer(base_data$Item)\r\n        all_pdf_medians$Item <- as.integer(all_pdf_medians$Item)\r\n        \r\n        dados_conferencia <- base_data %>%\r\n          left_join(all_pdf_medians, by = c(\"Número da Pesquisa\", \"Item\")) %>%\r\n          left_join(incisos_summary, by = c(\"Número da Pesquisa\", \"Item\")) %>%\r\n          arrange(`Número da Pesquisa`, Item)\r\n        \r\n        price_cols <- grep(\"^PREÇO \\\\d+$\", names(dados_conferencia), value = TRUE)\r\n        if (length(price_cols) > 0) {\r\n          \r\n          nova_coluna_nome <- \"A pesquisa atende o Parâmetro I ou II, Art.5º, da IN 65/2021?\"\r\n          final_col_order <- c(\"Número da Pesquisa\", \"Item\", \"CATMAT\", \"Descrição do Item\", price_cols, \r\n                               \"MÉDIA DOS PREÇOS\", \"MEDIANA DOS PREÇOS\", \"DESVIO PADRÃO DOS PREÇOS\", \r\n                               \"COEFICIENTE DE VARIAÇÃO\", \"USAR MEDIANA?\", \"MEDIANA (PAINEL DE PREÇOS)\", \r\n                               \"VALOR DE REFERÊNCIA\", \"INCISOS_CONCAT\",\r\n                               \"Valor unitário de referência = ou < que a mediana do Compras?\",\r\n                               nova_coluna_nome)\r\n          \r\n          price_start_letter <- openxlsx::int2col(match(price_cols[1], final_col_order))\r\n          price_end_letter <- openxlsx::int2col(match(price_cols[length(price_cols)], final_col_order))\r\n          media_letter <- openxlsx::int2col(match(\"MÉDIA DOS PREÇOS\", final_col_order))\r\n          mediana_letter <- openxlsx::int2col(match(\"MEDIANA DOS PREÇOS\", final_col_order))\r\n          desvio_letter <- openxlsx::int2col(match(\"DESVIO PADRÃO DOS PREÇOS\", final_col_order))\r\n          cv_letter <- openxlsx::int2col(match(\"COEFICIENTE DE VARIAÇÃO\", final_col_order))\r\n          usar_mediana_letter <- openxlsx::int2col(match(\"USAR MEDIANA?\", final_col_order))\r\n          painel_letter <- openxlsx::int2col(match(\"MEDIANA (PAINEL DE PREÇOS)\", final_col_order))\r\n          ref_val_letter <- openxlsx::int2col(match(\"VALOR DE REFERÊNCIA\", final_col_order))\r\n          incisos_concat_letter <- openxlsx::int2col(match(\"INCISOS_CONCAT\", final_col_order))\r\n          \r\n          dados_conferencia <- dados_conferencia %>%\r\n            mutate(\r\n              excel_row = row_number() + 2,\r\n              price_range = paste0(price_start_letter, excel_row, \":\", price_end_letter, excel_row),\r\n              `MÉDIA DOS PREÇOS` = paste0(\"AVERAGE(\", price_range, \")\"),\r\n              `MEDIANA DOS PREÇOS` = paste0(\"MEDIAN(\", price_range, \")\"),\r\n              `DESVIO PADRÃO DOS PREÇOS` = paste0(\"STDEVP(\", price_range, \")\"),\r\n              `COEFICIENTE DE VARIAÇÃO` = paste0(\"IFERROR(\", desvio_letter, excel_row, \"/\", media_letter, excel_row, \", 0)\"),\r\n              `USAR MEDIANA?` = paste0('IF(', cv_letter, excel_row, '>0.25, \"SIM\", \"NÃO\")'),\r\n              `VALOR DE REFERÊNCIA` = paste0('IF(', usar_mediana_letter, excel_row, '=\"SIM\", ', mediana_letter, excel_row, ', ', media_letter, excel_row, ')'),\r\n              \r\n              !!nova_coluna_nome := {\r\n                incisos_cell <- paste0(incisos_concat_letter, excel_row)\r\n                paste0(\r\n                  'IF(', incisos_cell, '=\"I\", \"Sim – Parâmetro I (OK)\", ',\r\n                  'IF(', incisos_cell, '=\"II\", \"Sim – Parâmetro II (OK)\", ',\r\n                  'IF(LEN(', incisos_cell, ')>0, \"Combinado – Parâmetros \" & ', incisos_cell, ' & \" (Avaliar)\", \"Outros Parâmetros (Avaliar)\")',\r\n                  '))'\r\n                )\r\n              },\r\n              \r\n              `Valor unitário de referência = ou < que a mediana do Compras?` = paste0('IF(OR(ISBLANK(', ref_val_letter, excel_row, '), ISBLANK(', painel_letter, excel_row, ')), \"Verificar\", IF(', ref_val_letter, excel_row, '<=', painel_letter, excel_row, ', \"SIM\", \"NÃO\"))')\r\n            )\r\n          \r\n          aba2_data <- dados_conferencia %>% select(any_of(final_col_order))\r\n        } else {\r\n          aba2_data <- dados_conferencia\r\n        }\r\n        \r\n        setProgress(0.60, detail = paste0(\"Montando arquivo Excel... (60%)\"))\r\n        log_text(paste(log_text(), \"\\n[3/4] Montando o arquivo Excel...\"))\r\n        \r\n        ordem_desejada_aba1 <- c('Número da Pesquisa','Item', 'Compõe', 'Nº Cotação', 'Inciso', 'UASG','Nome', 'Quantidade', 'Unidade', 'Preço unitário', 'Data', 'Endereço Eletrônico', 'Anexo', 'CATMAT', 'Descrição do Item', 'Título da Pesquisa')\r\n        aba1_data <- dados_extracao_pdf %>% select(any_of(ordem_desejada_aba1))\r\n        \r\n        formula_cols <- c(\"MÉDIA DOS PREÇOS\", \"MEDIANA DOS PREÇOS\", \"DESVIO PADRÃO DOS PREÇOS\", \r\n                          \"COEFICIENTE DE VARIAÇÃO\", \"USAR MEDIANA?\", \"VALOR DE REFERÊNCIA\",\r\n                          nova_coluna_nome,\r\n                          \"Valor unitário de referência = ou < que a mediana do Compras?\")\r\n        for(col in formula_cols) if (col %in% names(aba2_data)) class(aba2_data[[col]]) <- \"formula\"\r\n        \r\n        wb <- createWorkbook()\r\n        \r\n        addWorksheet(wb, \"Extração_PDF\")\r\n        header_style_aba1 <- createStyle(textDecoration = \"bold\", fgFill = \"#1E8449\", fontColour = \"white\", halign = \"center\", valign = \"center\", border = \"TopBottomLeftRight\", wrapText = FALSE)\r\n        \r\n        urls_para_links <- NULL\r\n        if (\"Endereço Eletrônico\" %in% names(aba1_data)) {\r\n          urls_para_links <- str_extract(aba1_data$`Endereço Eletrônico`, \"https?://[^\\\\s]+\")\r\n          aba1_data$`Endereço Eletrônico` <- \"\"\r\n        }\r\n        \r\n        writeData(wb, \"Extração_PDF\", aba1_data, headerStyle = header_style_aba1)\r\n        \r\n        if (!is.null(urls_para_links)) {\r\n          col_idx <- which(names(aba1_data) == \"Endereço Eletrônico\")\r\n          for (i in seq_along(urls_para_links)) {\r\n            url <- urls_para_links[i]\r\n            if (!is.na(url) && url != \"\") {\r\n              link_obj <- url\r\n              names(link_obj) <- url\r\n              class(link_obj) <- \"hyperlink\"\r\n              writeData(wb, sheet = \"Extração_PDF\", x = link_obj, startCol = col_idx, startRow = i + 1)\r\n            }\r\n          }\r\n        }\r\n        \r\n        setColWidths(wb, \"Extração_PDF\", cols = 1:ncol(aba1_data), widths = \"auto\")\r\n        setColWidths(wb, \"Extração_PDF\", cols = which(names(aba1_data) %in% c(\"Nome\", \"Descrição do Item\")), widths = 50)\r\n        \r\n        # ================================================================= #\r\n        # <<< ÚNICA LINHA ADICIONADA NESTA VERSÃO >>>\r\n        setColWidths(wb, \"Extração_PDF\", cols = which(names(aba1_data) %in% c(\"Item\", \"Compõe\", \"Quantidade\", \"CATMAT\")), widths = 15)\r\n        # <<< FIM DA MODIFICAÇÃO >>>\r\n        # ================================================================= #\r\n        \r\n        addWorksheet(wb, \"Conferência\")\r\n        \r\n        names(aba2_data)[names(aba2_data) == \"COEFICIENTE DE VARIAÇÃO\"] <- \"Coeficiente\\nde Variação\"\r\n        names(aba2_data)[names(aba2_data) == \"MEDIANA (PAINEL DE PREÇOS)\"] <- \"MEDIANA\\n(PAINEL DE PREÇOS)\"\r\n        names(aba2_data)[names(aba2_data) == nova_coluna_nome] <- \"A pesquisa atende o Parâmetro I ou II,\\nArt.5º, da IN 65/2021?\"\r\n        names(aba2_data)[names(aba2_data) == \"Valor unitário de referência = ou < que a mediana do Compras?\"] <- \"Valor unitário de referência\\n= ou < que a mediana do Compras?\"\r\n        \r\n        regra_txt <- \"Regra: Usar média se CV<=25%\"\r\n        col_start_regra <- which(grepl(\"DESVIO PADRÃO\", names(aba2_data)))\r\n        col_end_regra <- which(grepl(\"USAR MEDIANA\", names(aba2_data)))\r\n        if(length(col_start_regra) > 0 && length(col_end_regra) > 0) {\r\n          writeData(wb, \"Conferência\", regra_txt, startCol = col_start_regra, startRow = 1)\r\n          mergeCells(wb, \"Conferência\", cols = col_start_regra:col_end_regra, rows = 1)\r\n          style_regra <- createStyle(halign = \"center\", textDecoration = \"bold\", fgFill = \"#FCE4D6\")\r\n          addStyle(wb, \"Conferência\", style = style_regra, rows = 1, cols = col_start_regra:col_end_regra, gridExpand = TRUE)\r\n        }\r\n        \r\n        header_style_aba2 <- createStyle(textDecoration = \"bold\", fgFill = \"#D9E1F2\", halign = \"center\", valign = \"center\", border = \"TopBottomLeftRight\", wrapText = TRUE)\r\n        writeData(wb, \"Conferência\", aba2_data, startRow = 2, headerStyle = header_style_aba2)\r\n        \r\n        currency_style <- createStyle(numFmt = \"R$ #,##0.0000\")\r\n        percent_style <- createStyle(numFmt = \"0.00%\")\r\n        currency_cols_names <- c(price_cols, \"MÉDIA DOS PREÇOS\", \"MEDIANA DOS PREÇOS\", \"DESVIO PADRÃO DOS PREÇOS\", \"VALOR DE REFERÊNCIA\", \"MEDIANA\\n(PAINEL DE PREÇOS)\")\r\n        percent_cols_names <- c(\"Coeficiente\\nde Variação\")\r\n        \r\n        setColWidths(wb, \"Conferência\", cols = which(names(aba2_data) == \"Número da Pesquisa\"), widths = 20)\r\n        setColWidths(wb, \"Conferência\", cols = which(names(aba2_data) == \"Item\"), widths = 8)\r\n        setColWidths(wb, \"Conferência\", cols = which(names(aba2_data) == \"CATMAT\"), widths = 12)\r\n        setColWidths(wb, \"Conferência\", cols = which(names(aba2_data) == \"Descrição do Item\"), widths = 50)\r\n        setColWidths(wb, \"Conferência\", cols = which(grepl(\"^PREÇO\", names(aba2_data))), widths = 15)\r\n        setColWidths(wb, \"Conferência\", cols = which(names(aba2_data) %in% currency_cols_names), widths = 18)\r\n        setColWidths(wb, \"Conferência\", cols = which(names(aba2_data) %in% c(\"Coeficiente\\nde Variação\", \"USAR MEDIANA?\")), widths = 15)\r\n        setColWidths(wb, \"Conferência\", cols = which(grepl(\"Valor unitário\", names(aba2_data))), widths = 22)\r\n        setColWidths(wb, \"Conferência\", cols = which(grepl(\"A pesquisa atende\", names(aba2_data))), widths = 40)\r\n        \r\n        col_idx_hide <- which(names(aba2_data) == \"INCISOS_CONCAT\")\r\n        if (length(col_idx_hide) > 0) {\r\n          setColWidths(wb, \"Conferência\", cols = col_idx_hide, hidden = TRUE)\r\n        }\r\n        \r\n        for(col_name in names(aba2_data)){\r\n          col_idx <- which(names(aba2_data) == col_name)\r\n          style_to_apply <- NULL\r\n          if(col_name %in% currency_cols_names) {\r\n            style_to_apply <- currency_style\r\n          } else if (col_name %in% percent_cols_names) {\r\n            style_to_apply <- percent_style\r\n          }\r\n          if(!is.null(style_to_apply)) addStyle(wb, \"Conferência\", style = style_to_apply, rows = 3:(nrow(aba2_data) + 2), cols = col_idx, gridExpand = TRUE, stack = TRUE)\r\n        }\r\n        \r\n        setProgress(0.85, detail = paste0(\"Finalizando e preparando para download... (85%)\"))\r\n        log_text(paste(log_text(), \"\\n[4/4] Codificando arquivo e iniciando download...\"))\r\n        \r\n        tmp_xlsx_path <- tempfile(fileext = \".xlsx\")\r\n        saveWorkbook(wb, tmp_xlsx_path, overwrite = TRUE)\r\n        \r\n        filename <- paste0(\"Análise_Pesquisa_\", tools::file_path_sans_ext(input$pdf_file$name), format(Sys.time(), \"_%d-%m-%Y_%Hh%Mm%Ss\"), \".xlsx\")\r\n        file_data <- readBin(tmp_xlsx_path, \"raw\", file.info(tmp_xlsx_path)$size)\r\n        encoded_data <- base64enc::base64encode(file_data)\r\n        \r\n        session$sendCustomMessage(type = \"download_b64\", message = list(data = encoded_data, filename = filename, mime = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"))\r\n        \r\n        setProgress(1, detail = \"Concluído! (100%)\")\r\n        log_text(paste(log_text(), \"\\n\\n--- SUCESSO! ---\\nO arquivo Excel foi gerado. O download deve iniciar automaticamente.\"))\r\n        \r\n      }, error = function(e) {\r\n        log_text(paste(log_text(), \"\\n\\n--- ERRO DURANTE O PROCESSAMENTO ---\\n\", e$message))\r\n      }, finally = {\r\n        updateActionButton(session, \"process_button\", label = \"Processar e Baixar Excel\", icon = icon(\"cogs\"))\r\n        shinyjs::enable(\"process_button\")\r\n        \r\n        if (!is.null(tmp_xlsx_path) && file.exists(tmp_xlsx_path)) unlink(tmp_xlsx_path)\r\n      })\r\n    })\r\n  })\r\n  \r\n}\r\n# ===================================================================================\r\n# INICIA A APLICAÇÃO SHINY\r\n# ===================================================================================\r\nshinyApp(ui, server)","type":"text"},{"name":"importa_shinylive.R","content":"install.packages(\"shinylive\")\r\ninstall.packages(\"httpuv\")\r\n\r\n\r\nlibrary(shinylive)\r\nlibrary(httpuv)\r\n\r\n\r\nshinylive::export(appdir = \".\", destdir = \"docs\")\r\n\r\nhttpuv::runStaticServer(\"docs/\", port = 8008)\r\n\r\n\r\n","type":"text"}]
